Types of Linked Lists:

Singly Linked List: Each node contains data and a reference (or pointer) to the next node in the sequence. Operations such as adding or deleting nodes can be done efficiently at the head of the list. However, accessing nodes requires traversal from the head to the desired node.

Doubly Linked List: Each node contains data, a reference to the next node, and a reference to the previous node. This allows traversal in both directions and simplifies operations like insertion and deletion at both ends of the list.

Advantages of Linked Lists Over Arrays:

Dynamic Size: Linked lists can easily grow and shrink in size by adding or removing nodes, unlike arrays which require resizing and copying when the size changes.
Efficient Insertions/Deletions: Insertions and deletions are more efficient in linked lists (O(1) time complexity) compared to arrays (O(n) time complexity) since they don't require shifting elements.

Memory Utilization: Linked lists use memory more efficiently as they allocate memory only for the elements they contain, whereas arrays may allocate extra memory that might not be used.
Time Complexity:

Add Task: O(n) in the worst case, as you may need to traverse the entire list to add the task at the end.
Search Task by ID: O(n), as you need to traverse the list to find the task with the given ID.
Traverse Tasks: O(n), as you need to visit every node in the list.
Delete Task by ID: O(n), as you may need to traverse the list to find and remove the node.
Advantages of Linked Lists Over Arrays for Dynamic Data:

Dynamic Size: Linked lists can handle dynamic changes in the number of tasks more efficiently than arrays.
Efficient Insertions/Deletions: Adding or removing tasks is efficient since no elements need to be shifted. You only need to update pointers.
This code provides a full implementation of a task management system using a singly linked list, covering all required functionalities including adding, searching, traversing, and deleting tasks.
